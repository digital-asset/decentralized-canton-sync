-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.AmuletAllocation where

import Splice.Api.Token.MetadataV1
import Splice.Api.Token.AllocationV1
import DA.Map qualified as Map
import Splice.Amulet
import Splice.AmuletRules
import Splice.Expiry
import Splice.Round
import Splice.Types
import Splice.Util

-- | Amulet allocated in locked form to a trade.
template AmuletAllocation
  with
    lockedAmulet : ContractId LockedAmulet -- ^ Locked amulet that holds the funds for the allocation
    allocation : AllocationView
  where
    signatory allocationAppProvider allocation, allocation.transferLeg.sender
    observer allocation.settlement.executor

    interface instance Allocation for AmuletAllocation where
      view = allocation

      allocation_withdrawImpl _self extraArgs = do
        let context = extraArgs.context
        openRoundCid <- getContextContractId @OpenMiningRound context "splice.lfdecentralizedtrust.org/open-round" -- TODO (#17541):define keys
        exercise lockedAmulet LockedAmulet_Unlock with openRoundCid
        pure ChoiceExecutionMetadata with meta = emptyMetadata

      allocation_cancelImpl _self extraArgs = do
        -- TODO (#17541):share code with withdraw
        let context = extraArgs.context
        openRoundCid <- getContextContractId @OpenMiningRound context "splice.lfdecentralizedtrust.org/open-round" -- TODO (#17541):define keys
        -- unfortunately we need a reference to a round to unlock the amulet,
        -- so even cancellation requires the settlement app to fetch a choice context
        exercise lockedAmulet LockedAmulet_Unlock with openRoundCid
        pure ChoiceExecutionMetadata with meta = emptyMetadata

      allocation_executeTransferImpl _self extraArgs = do
        let context = extraArgs.context
        -- extract payment context (TODO (#17541):consider how much validation is required)
        paymentContext <- paymentFromChoiceContext context
        -- fetch open round
        let dso = allocationAppProvider allocation
        let openRoundCid = paymentContext.context.openMiningRound
        _openRound <- fetchReferenceData (ForDso with dso) openRoundCid
        -- unlock amulet
        unlockResult <- exercise lockedAmulet LockedAmulet_Unlock with openRoundCid
        let amuletCid = unlockResult.amuletSum.amulet
        -- execute transfer
        let transfer = Splice.AmuletRules.Transfer with
              sender = allocation.transferLeg.sender
              provider = allocation.settlement.executor
              inputs = [InputAmulet amuletCid]
              outputs =
                [ TransferOutput with
                    receiver = allocation.transferLeg.receiver
                    amount = allocation.transferLeg.amount
                    receiverFeeRatio = 0.0 -- The sender pays all fees.
                    lock = None
                ]
        _ <- exercisePaymentTransfer paymentContext transfer
        pure ChoiceExecutionMetadata with meta = emptyMetadata


-- | TODO (#17541):move to script support functions
paymentToChoiceContext : PaymentTransferContext -> ChoiceContext
paymentToChoiceContext context = ChoiceContext with
  values = Map.fromList
    [ ("splice.lfdecentralizedtrust.org/amulet-rules", AV_ContractId $ coerceContractId context.amuletRules)
    , ("splice.lfdecentralizedtrust.org/open-round", AV_ContractId $ coerceContractId context.context.openMiningRound)
    ]

paymentFromChoiceContext : ChoiceContext -> Update PaymentTransferContext
paymentFromChoiceContext context = do
    -- TODO(#119): share "splice.lfdecentralizedtrust.org" as a constant
    amuletRulesCid <- getContextContractId @AmuletRules context "splice.lfdecentralizedtrust.org/amulet-rules"
    openRoundCid <- getContextContractId @OpenMiningRound context "splice.lfdecentralizedtrust.org/open-round"
    optFeaturedAppRightCid <- lookupContextContractId @FeaturedAppRight context "splice.lfdecentralizedtrust.org/featured-app-right"
    pure PaymentTransferContext with
      amuletRules = amuletRulesCid
      context = TransferContext with
        openMiningRound = openRoundCid
        issuingMiningRounds = mempty
        featuredAppRight = optFeaturedAppRightCid
        validatorRights = mempty

lookupContextContractId : Template t => ChoiceContext -> Text -> Update (Optional (ContractId t))
lookupContextContractId context k = do
  case Map.lookup k context.values of
    None -> pure None
    Some (AV_ContractId anyCid) -> pure (Some (coerceContractId anyCid))
    Some value -> fail $ "Expected contract id for: " <> k <> ", got: " <> show value

getContextContractId : Template t => ChoiceContext -> Text -> Update (ContractId t)
getContextContractId context k = do
  optCid <- lookupContextContractId context k
  case optCid of
    None -> fail $ "Missing context entry for: " <> k
    Some cid -> pure cid

allocationAppProvider : AllocationView -> Party
allocationAppProvider AllocationView{..} = transferLeg.instrumentId.admin

-- | The extra allocation that is made to guard against the transfer fees changing
-- between the time of locking the amulet and the time of executing the actual transfer.
feeReserveMultiplier : Decimal
feeReserveMultiplier = 3.0

allocationToAmuletOutput : AllocationView -> TransferOutput
allocationToAmuletOutput allocation =
  TransferOutput with
    receiver = allocation.transferLeg.receiver
    amount = allocation.transferLeg.amount
    receiverFeeRatio = 0.0  -- all fees are paid by the sender
    lock = None

fundAllocation : Party -> AllocationView -> PaymentTransferContext -> [TransferInput] -> Update (ContractId Allocation)
fundAllocation provider allocation context inputs = do
  -- compute the transfer fees for the actual transfer that need to be covered
  let receiverOutput = allocationToAmuletOutput allocation
  [expectedTransferFees] <- exerciseComputeFees context allocation.transferLeg.sender [receiverOutput]
  -- approximate the holding fees for the locked amulet
  let approximateHoldingFees = 0.0 -- TODO (#17541):implement
  let feesReserveAmount = (expectedTransferFees + approximateHoldingFees) * feeReserveMultiplier
  -- lock the amulet
  let transfer = Splice.AmuletRules.Transfer with
        sender = allocation.transferLeg.sender
        provider
        outputs =
          [ TransferOutput with
              receiver = allocation.transferLeg.sender
              amount = allocation.transferLeg.amount + feesReserveAmount
              receiverFeeRatio = 0.0 -- locking fees are paid by the sender
              lock = Some TimeLock with
                expiresAt = allocation.settlement.settleBefore
                holders = [allocationAppProvider allocation]
          ]
        inputs
  -- TODO (#17541):prudent engineering - check DSO party on amulet rules
  result <- exercisePaymentTransfer context transfer
  let [TransferResultLockedAmulet lockedAmulet] = result.createdAmulets
  toInterfaceContractId <$> create AmuletAllocation with
    allocation
    lockedAmulet
